{
  function flatten(stuff) {
    return stuff.map(a => a.filter(a => a != null)).map(a => a[0]) ;
  }
  const TokenTypes = {
  	OPCODE: 0,
    REGISTER: 1,
    NUMBER: 2,
    STRING: 3,
    LABEL: 4,
    POINT: 5,
    ARRAY: 6,
    EXPRESSION: 7,
    ANNOTATION: 8,
    OTHER: 9
  }

}
  Expression "Expression"
      = exp:(Label/Operation/Comment/Annotations) _ anno:(Annotations)? _ Comment? {
      const r = []
      if (exp) r.push(...exp);
      if (anno) r.push(...anno);
      return r;
      }

  Operation "Operation"
  = exp:Opcode args:(_ ArgumentOrTuple)* {
      return [exp, ...flatten(args)]
      }

  ArgumentOrTuple "Argument or Tuple"
      = aot:(Argument/Tuple/Array/Eval) {
      return aot
      }

  Argument "Argument"
      = arg:(Register/Number/String) {
      return arg
      }


   Register "Register"
      = reg:([$a-zA-Z][a-zA-Z0-9.-]*[a-zA-Z0-9]*) {
      return {
        type: TokenTypes.REGISTER,
            value: text()
            }
      }

  Annotations "Annotations"
  = first:Annotation rest:(_ Annotation)* {
  	return [first, ...flatten(rest)]
  }

  Annotation "Annotation"
  = "@" anno:([a-zA-Z0-9-.]+) _ args:AnnotationArgs? {
  	let argList = []

  	return {
    	type: TokenTypes.ANNOTATION,
        value: anno.join(""),
        args: args
      };
  }

  AnnotationArgs "AnnotationArgs"
  = rest:(_ AnnotationArg)* {
  	return rest.map(r => r[1])
  }


  AnnotationArg "AnnotationArg"
  = a:[a-zA-Z0-9-.]+ {
  	return a.join("")
  }


  Comment "Comment"
  = "#" .* {
    return null
    }

  Number "Number"
      = sign:("+"/"-")? num:[0-9]+ dot:("." tail:[0-9]+)? {
        /*let n = num.join("");
        if (dot) n += "." + dot[1].join("");
        if (sign) n = sign + n;*/
        return { type: TokenTypes.NUMBER, value: Number(text()) }
      }

  String "String"
   =  '"' string:StringChars* '"' {
     return { type: TokenTypes.STRING, value: string.join("") }
     }

  StringChars
  = [^'"'\n]

  Tuple "Tuple"
      = "("_ args:(_ Argument)* _ ")" {
      return { type: TokenTypes.POINT, value: flatten(args) }
      }

  Eval "Eval"
  = "{" _ exp:([^}]*) _ "}" {
  	return { type: TokenTypes.EXPRESSION, value: exp.join("") }
  }

  Array "Array"
      = "["_ args:(_ ArgumentOrTuple)* _ "]" {
      return { type: TokenTypes.ARRAY, value: flatten(args) }
      }

  Opcode "Opcode"
      = [A-Z][A-Z0-9]+ {
      	return { type: TokenTypes.OPCODE, value: text() }
      }

  Label "Label"
      = label:([A-Z0-9]+)":" {
      return [{
        type: TokenTypes.LABEL,
            value: label.join("")
        }]
      }

  _ "whitespace"
    = [	 ]* {
    return null
    }